[{"path":"https://github.com/mattssca/BioMaesteR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam Mattsson. Author, maintainer.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mattsson (2024). BioMaesteR: package convenience functions generic genomic analysis within R. R package version 0.1.0.","code":"@Manual{,   title = {BioMaesteR: A package with convenience functions for generic genomic analysis within R},   author = {Adam Mattsson},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"https://github.com/mattssca/BioMaesteR/index.html","id":"biomaester","dir":"","previous_headings":"","what":"biomaesteR","title":"A package with convenience functions for generic genomic analysis within R","text":"biomaesteR, R package convenience functions commonly requested various types genomic analysis within R. package specialized provide bioinformatics infrastructure can used variety genomic analysis. repo also ongoing project intended demonstrating following best-practices development R packages. includes adequate package documentation (functions, bundled data objects, etc.), reproducible unit tests vignettes. Upon Pull Requests, repo also executes GitAction workflow package installed various environments thorough testing complete code base.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A package with convenience functions for generic genomic analysis within R","text":"Open R studio run following command install development version GitHub:","code":"devtools::install_github(\"mattssca/BioMaesteR\")"},{"path":"https://github.com/mattssca/BioMaesteR/index.html","id":"website","dir":"","previous_headings":"","what":"Website","title":"A package with convenience functions for generic genomic analysis within R","text":"information, please visit BioMaesteR website.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/bin_splitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin Splitter — bin_splitter","title":"Bin Splitter — bin_splitter","text":"function takes region splits bins  specified size.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/bin_splitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin Splitter — bin_splitter","text":"","code":"bin_splitter(   these_regions = NULL,   qchrom = NULL,   qstart = NULL,   qend = NULL,   bin_size = 1000 )"},{"path":"https://github.com/mattssca/BioMaesteR/reference/bin_splitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin Splitter — bin_splitter","text":"these_regions region(s) queried. Can data frame regions following columns; chrom, start, end. string following format chr:start-end. qchrom Query chromosome (prefixed un-prefixed), Required `these_regions` provided. qstart Query start position. Required `these_regions` provided. qend Query end position. Required `these_regions` provided. bin_size size bins split regions , default 1000.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/bin_splitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin Splitter — bin_splitter","text":"data frame input regions binned specified bin size.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/bin_splitter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bin Splitter — bin_splitter","text":"function internally calls purify_regions function  properly format incoming regions.Thus, function can accept either  data frame regions individual region coordinates.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/bin_splitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin Splitter — bin_splitter","text":"","code":"#Example 1 - Call function with regions specified individually my_bins = bin_splitter(qchrom = c(\"chr1\", \"chr2\"),                         qstart = c(100, 200),                         qend = c(200, 300),                        bin_size = 10)  #Example 2 - Call the funciton with regions from a data frame my_regions = purify_regions(these_regions = c(\"chr7:1000-500000\", \"chr8:50000-7000000\")) these_bins = bin_splitter(these_regions = my_regions, bin_size = 100000)"},{"path":"https://github.com/mattssca/BioMaesteR/reference/centromeres_grch37.html","id":null,"dir":"Reference","previous_headings":"","what":"Centromeres grch37 — centromeres_grch37","title":"Centromeres grch37 — centromeres_grch37","text":"data frame centromeres coordinates respect grch37.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/centromeres_grch37.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centromeres grch37 — centromeres_grch37","text":"","code":"centromeres_grch37"},{"path":"https://github.com/mattssca/BioMaesteR/reference/centromeres_grch37.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Centromeres grch37 — centromeres_grch37","text":"## `centromeres_grch37` data frame 22 rows 4 columns. chrom Factor. Chromosomes without chr-prefix, 1:22. start Integer. Start coordinates specified chromosome arm. end Integer. End coordinates specified chromosome arm. arm Factor. Chromosome arm, (always centromere).","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/centromeres_hg38.html","id":null,"dir":"Reference","previous_headings":"","what":"Centromeres hg38 — centromeres_hg38","title":"Centromeres hg38 — centromeres_hg38","text":"data frame centromeres coordinates respect hg38.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/centromeres_hg38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centromeres hg38 — centromeres_hg38","text":"","code":"centromeres_hg38"},{"path":"https://github.com/mattssca/BioMaesteR/reference/centromeres_hg38.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Centromeres hg38 — centromeres_hg38","text":"## `centromeres_hg38` data frame 22 rows 4 columns. chrom Factor. chr-prefixed chromosomes, chr1-chr22. start Integer. Start coordinates specified chromosome arm. end Integer. End coordinates specified chromosome arm. arm Factor. Chromosome arm (always centromere).","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/chromosome_arms_grch37.html","id":null,"dir":"Reference","previous_headings":"","what":"Chromosome Arms grch37. — chromosome_arms_grch37","title":"Chromosome Arms grch37. — chromosome_arms_grch37","text":"data frame chromosome arm coordinates respect grch37.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/chromosome_arms_grch37.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromosome Arms grch37. — chromosome_arms_grch37","text":"","code":"chromosome_arms_grch37"},{"path":"https://github.com/mattssca/BioMaesteR/reference/chromosome_arms_grch37.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Chromosome Arms grch37. — chromosome_arms_grch37","text":"## `chromosome_arms_grch37` data frame 44 rows 4 columns. chrom Factor. Chromosomes without chr-prefix, 1:22. start Integer. Start coordinates specified chromosome arm. end Integer. End coordinates specified chromosome arm. arm Factor. Chromosome arm, either p q.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/chromosome_arms_hg38.html","id":null,"dir":"Reference","previous_headings":"","what":"Chromosome Arms hg38. — chromosome_arms_hg38","title":"Chromosome Arms hg38. — chromosome_arms_hg38","text":"data frame chromosome arm coordinates respect hg38.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/chromosome_arms_hg38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromosome Arms hg38. — chromosome_arms_hg38","text":"","code":"chromosome_arms_hg38"},{"path":"https://github.com/mattssca/BioMaesteR/reference/chromosome_arms_hg38.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Chromosome Arms hg38. — chromosome_arms_hg38","text":"## `chromosome_arms_hg38` data frame 44 rows 4 columns. chrom Factor. chr-prefixed chromosomes, chr1-chr22. start Integer. Start coordinates specified chromosome arm. end Integer. End coordinates specified chromosome arm. arm Factor. Chromosome arm, either p q.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/cyto_ranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Cyto Ranger. — cyto_ranger","title":"Cyto Ranger. — cyto_ranger","text":"function takes region regions returns cytoband information region(s).","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/cyto_ranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cyto Ranger. — cyto_ranger","text":"","code":"cyto_ranger(   these_regions = NULL,   qchrom = NULL,   qstart = NULL,   qend = NULL,   projection = \"hg38\" )"},{"path":"https://github.com/mattssca/BioMaesteR/reference/cyto_ranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cyto Ranger. — cyto_ranger","text":"these_regions region(s) queried. Can data frame regions following columns; chrom, start, end. string following format chr:start-end. qchrom Query chromosome (prefixed un-prefixed), Required `these_regions` provided. qstart Query start position. Required `these_regions` provided. qend Query end position. Required `these_regions` provided. projection desired projection want back coordinates . Available projections hg38 grch37. Default hg38.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/cyto_ranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cyto Ranger. — cyto_ranger","text":"data frame cytoband information specified region(s).","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/cyto_ranger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cyto Ranger. — cyto_ranger","text":"Query region relevant cytoband information specified  region(s). function accepts variety incoming regions. Either, regions can provided data frame `these_regions`. , following columns must exist; chrom, start, end. parameter (`these_regions`) also accept region \"region\" format, (.e chr:start-end). can region vector characters multiple regions. user can also individually specify region(s) ; `qchrom` (string), `qstart` (string, integer), `qend` (string integer). parameters can also accept vector characters multiple regions. function also handles chromosome prefixes returned object, based selected `projection`.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/cyto_ranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cyto Ranger. — cyto_ranger","text":"","code":"#' #Example 1 - Give the function one region as a string my_region = cyto_ranger(these_regions = \"chr8:127735434-127742951\")  #Example 2 - Give the function multiple regions as a string my_regions = cyto_ranger(these_regions = c(\"chr8:128747680-128753674\",                                            \"chr18:60790579-60987361\"),                          projection = \"grch37\")  #Example 3 - Individually specify the chromosome, start and end coordinates this_region = cyto_ranger(qchrom = \"chr8\",                           qstart = 127735434,                           qend = 127742951)  #Example 4 - Individually specify multiple regions with the query parameters these_regions = cyto_ranger(qchrom = c(\"chr8\", \"chr18\"),                             qstart = c(128747680, 60790579),                             qend = c(128753674, 60987361),                             projection = \"grch37\")"},{"path":"https://github.com/mattssca/BioMaesteR/reference/cytobands_grch37.html","id":null,"dir":"Reference","previous_headings":"","what":"Cytobands grch37 — cytobands_grch37","title":"Cytobands grch37 — cytobands_grch37","text":"data frame cytobands coordinates respect grch37.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/cytobands_grch37.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cytobands grch37 — cytobands_grch37","text":"","code":"cytobands_grch37"},{"path":"https://github.com/mattssca/BioMaesteR/reference/cytobands_grch37.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cytobands grch37 — cytobands_grch37","text":"## `cytobands_grch37` data frame 862 rows 5 columns. chrom Factor. Chromosomes without chr-prefix, 1:22. start Integer. Start coordinates specified chromosome arm. end Integer. End coordinates specified chromosome arm. cytoBand Character. Cytoband name specified range. gieStain Factor. Giemsa Stain proporties described cyto band.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/cytobands_hg38.html","id":null,"dir":"Reference","previous_headings":"","what":"Cytobands hg38 — cytobands_hg38","title":"Cytobands hg38 — cytobands_hg38","text":"data frame cytobands coordinates respect hg38.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/cytobands_hg38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cytobands hg38 — cytobands_hg38","text":"","code":"cytobands_hg38"},{"path":"https://github.com/mattssca/BioMaesteR/reference/cytobands_hg38.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cytobands hg38 — cytobands_hg38","text":"## `cytobands_hg38` data frame 1549 rows 5 columns. chrom Factor. chr-prefixed chromosomes, chr1-chr22. start Integer. Start coordinates specified chromosome arm. end Integer. End coordinates specified chromosome arm. cytoBand Character. Cytoband name specified range. gieStain Factor. Giemsa Stain proporties described cyto band.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_coordinates_grch37.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Coordinates grch37. — gene_coordinates_grch37","title":"Gene Coordinates grch37. — gene_coordinates_grch37","text":"gene coordinates respect grch37. data set downloaded ensembl.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_coordinates_grch37.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Coordinates grch37. — gene_coordinates_grch37","text":"","code":"gene_coordinates_grch37"},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_coordinates_grch37.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene Coordinates grch37. — gene_coordinates_grch37","text":"## `gene_coordinates_grch37` data frame 57905 rows 5 columns. chrom Factor. chromosome (un-prefixed) gene residing . start Integer. start coordinates gene. end Integer. end coordinates gene. width Integer. width gene. strand Defined + forward - reverse. type Feature type name. Current allowed features ; gene, transcript, exon, CDS, Selenocysteine, start_codon, stop_codon UTR tag collection additional key value tags ccds_id CCDS identifier linked transcript ensembl_gene_id Character. Ensembl gene ID. hugo_symbol Character. Gene symbol Hugo format. source Name program generated feature, data source (database project name) score floating point value indiciating score feature gene_version stable identifier version gene gene_source annotation source gene gene_biotype biotype gene transcript_id stable identifier transcript transcript_version stable identifier version transcript transcript_name symbold transcript derived gene name transcript_source annotation source transcript transcript_biotype biotype transcript exon_number Position exon transcript exon_id stable identifier exon exon_version stable identifier version exon protein_id Stable identifier transcript's protein protein_version Stable identifier version transcript's protein","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_coordinates_hg38.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Coordinates hg38. — gene_coordinates_hg38","title":"Gene Coordinates hg38. — gene_coordinates_hg38","text":"gene coordinates respect hg38. data set downloaded ensembl.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_coordinates_hg38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Coordinates hg38. — gene_coordinates_hg38","text":"","code":"gene_coordinates_hg38"},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_coordinates_hg38.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene Coordinates hg38. — gene_coordinates_hg38","text":"## `gene_coordinates_hg38` data frame 62754 rows 5 columns. chrom Factor. chromosome (un-prefixed) gene residing . start Integer. start coordinates gene. end Integer. end coordinates gene. width Integer. width gene. strand Defined + forward - reverse. type Feature type name. Current allowed features ; gene, transcript, exon, CDS, Selenocysteine, start_codon, stop_codon UTR tag collection additional key value tags ccds_id CCDS identifier linked transcript ensembl_gene_id Character. Ensembl gene ID. hugo_symbol Character. Gene symbol Hugo format. source Name program generated feature, data source (database project name) score floating point value indiciating score feature gene_version stable identifier version gene gene_source annotation source gene gene_biotype biotype gene transcript_id stable identifier transcript transcript_version stable identifier version transcript transcript_name symbold transcript derived gene name transcript_source annotation source transcript transcript_biotype biotype transcript exon_number Position exon transcript exon_id stable identifier exon exon_version stable identifier version exon protein_id Stable identifier transcript's protein protein_version Stable identifier version transcript's protein","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_ranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Ranger. — gene_ranger","title":"Gene Ranger. — gene_ranger","text":"Return coordinates different formats one gene set genes.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_ranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Ranger. — gene_ranger","text":"","code":"gene_ranger(   these_genes = NULL,   projection = \"hg38\",   return_as = \"data.frame\",   write_to_bed = FALSE,   bed_path = NULL,   track_name = NULL,   track_description = NULL )"},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_ranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene Ranger. — gene_ranger","text":"these_genes Specify genes interest. function accepts multiple genes. Genes can specified either Hugo Format Ensembl IDs. function figure format requesting. projection desired projection want back coordinates . Available projections hg38 grch37. Default hg38. return_as Speciy format returned object. Possible values ; data.frame (default). mode, following columns kept; chrom, start, end, width, strand, gene_biotype, gene symbol (Hugo Ensembl format, depending user specifies `these_genes`). `return_as = \"bed\"`, function returns standard bed columns chrom, start, end. also attaches following optional columns; score strand. user can also request return \"region\" format (chr:start-end). write_to_bed Boolean parameter. Set TRUE (default FALSE) write output bed file. bed_path `write_to_bed = TRUE`, parameter required. Specify path  generated ebd file. track_name `write_to_bed = TRUE`, parameter required. Specify track name generated bed file. track_description `write_to_bed = TRUE`, parameter required. Specify track description generated bed file.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_ranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene Ranger. — gene_ranger","text":"data frame coordinates requested gene. See `return_as` information controlling return function.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_ranger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gene Ranger. — gene_ranger","text":"function takes gene set genes `these_genes` parameter returns genomic coordinates selected projection. Genes can formatted one following formats; Hugo Symbol Ensembl Gene ID. user gets decide projection `projection` parameter (hg38 grch37 available). Furthermore, function flexible return formats available. information see parameter description `return_as`. Note user sets `write_to_bed = TRUE`, function writes bed file (.e nothing returned).","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/gene_ranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene Ranger. — gene_ranger","text":"","code":"#Example 1 - Request one gene (in Hugo format) and with default parameters hugo_myc = gene_ranger(these_genes = \"MYC\")  #Example 2 - Same as example one but MYC is here specified as Ensembl ID ensembl_myc = gene_ranger(these_genes = \"ENSG00000136997\")  #Example 3 - Request multiple genes with non-default parameters my_genes = gene_ranger(these_genes = c(\"MYC\", \"BCL2\"),                        projection = \"grch37\",                        return_as = \"region\")  #Example 4 - Request multiple Ensembl IDs and return in bed format my_bed = gene_ranger(these_genes = c(\"ENSG00000136997\", \"ENSG00000171791\"),                      return_as = \"bed\")  #Example 5 - Write to bed file gene_ranger(these_genes = c(\"BCL2\", \"MYC\"),             projection = \"grch37\",             write_to_bed = TRUE,             bed_path = \"my_bed\",             track_name = \"MYC and BCL2\",             track_description = \"Genes of interest\") #> SUCCESS! bed file written to my_bed #> NULL"},{"path":"https://github.com/mattssca/BioMaesteR/reference/get_gene_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gene Info — get_gene_info","title":"Get Gene Info — get_gene_info","text":"Convenience function returning information gene set genes. function internally called [BioMaesteR::get_gene_region].","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/get_gene_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gene Info — get_gene_info","text":"","code":"get_gene_info(these_genes = NULL, projection = \"hg38\", raw = FALSE)"},{"path":"https://github.com/mattssca/BioMaesteR/reference/get_gene_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gene Info — get_gene_info","text":"these_genes Required argument. gene genes interest. projection desired projection, default hg38. raw Default FALSE, set TRUE keeping columns.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/get_gene_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Gene Info — get_gene_info","text":"data frame gene information.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/get_gene_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Gene Info — get_gene_info","text":"Give function gene set genes (vector characters), specify projection (, hg38 default projection) return gene information based bundled data. default function run `raw = FALSE`, returns subset columns. instead user wants everything back (.e available columns) toggle `raw` `TRUE`.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/get_gene_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Gene Info — get_gene_info","text":"","code":"#Example 1 - Query one gene (in Hugo format) and with default parameters. hugo_myc = get_gene_info(these_genes = \"MYC\")  #Example 2 - Same as example 1 but MYC is here specified as Ensembl ID. ensembl_myc = get_gene_info(these_genes = \"ENSG00000136997\")  #Example 3 - Request multiple genes with non-default parameters hugo_genes = get_gene_info(these_genes = c(\"MYC\", \"BCL2\"),                            projection = \"grch37\")  #Example 4 - Request multiple Ensembl IDs and return all columns. ensembl_genes = get_gene_info(these_genes = c(\"ENSG00000136997\", \"ENSG00000171791\"),                               raw = TRUE)"},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Purify Chromosomes. — purify_chr","title":"Purify Chromosomes. — purify_chr","text":"Helper function dealing chromosome prefixes based  selected projection.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Purify Chromosomes. — purify_chr","text":"","code":"purify_chr(projection = NULL, incoming_table = NULL)"},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Purify Chromosomes. — purify_chr","text":"projection Required parameter, needed determine chromosomes  prefixed . incoming_table Required parameter, data frame check prefixes.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Purify Chromosomes. — purify_chr","text":"data frame columns incoming data frame, prefixes added removed based selected projection.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_chr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Purify Chromosomes. — purify_chr","text":"function accepts data frame column check prefixes. function add remove prefixes based selected projection. function expects column named \"chrom\"  incoming data frame.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Purify Chromosomes. — purify_chr","text":"","code":"#Example 1 - Add prefixes to a data frame my_data = data.frame(chrom = c(\"1\", \"2\", \"3\")) my_data = purify_chr(projection = \"hg38\", incoming_table = my_data)"},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Purify Regions. — purify_regions","title":"Purify Regions. — purify_regions","text":"Helper function cleaning standardize regions.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Purify Regions. — purify_regions","text":"","code":"purify_regions(   these_regions = NULL,   qchrom = NULL,   qstart = NULL,   qend = NULL,   projection = \"hg38\" )"},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Purify Regions. — purify_regions","text":"these_regions region(s) queried. Can data frame regions following columns; chrom, start, end. string following format chr:start-end. qchrom Query chromosome (prefixed un-prefixed), Required `these_regions` provided. qstart Query start position. Required `these_regions` provided. qend Query end position. Required `these_regions` provided. projection desired projection want back coordinates . Available projections hg38 grch37. Default hg38.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Purify Regions. — purify_regions","text":"data table three columns, chrom, start, end.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Purify Regions. — purify_regions","text":"function accepts variety incoming regions. Either, regions can provided data frame `these_regions`. , following columns must exist; chrom, start, end. parameter (`these_regions`) also accept region \"region\" format, (.e chr:start-end). can region vector characters multiple regions. user can also individually specify region(s) ; `qchrom` (string), `qstart` (string, integer), `qend` (string integer). parameters can also accept vector characters multiple regions. function also handles chromosome prefixes returned object, based selected `projection`. addition, function also checks provided start coordinate equal greater end coordinate  chromosome. also ensures specified ranges within  actual chromosomal range.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/purify_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Purify Regions. — purify_regions","text":"","code":"#Example 1 - Give the function one region as a string my_region = purify_regions(these_regions = \"chr1:100-500\")  #Example 2 - Give the function multiple regions as a string my_regions = purify_regions(these_regions = c(\"chr1:100-500\", \"chr2:100-500\"),                             projection = \"grch37\")  #Example 3 - Individually specify the chromosome, start and end coordinates this_region = purify_regions(qchrom = \"chr1\",                              qstart = 100,                              qend = 500)  #Example 4 - Individually specify multiple regions with the query parameters these_regions = purify_regions(qchrom = c(\"chr1\", \"chr2\"),                                qstart = c(100, 200),                                qend = c(500, 600),                                projection = \"grch37\")"},{"path":"https://github.com/mattssca/BioMaesteR/reference/region_ranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Region Ranger. — region_ranger","title":"Region Ranger. — region_ranger","text":"Return genes residing defined region(s).","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/region_ranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Region Ranger. — region_ranger","text":"","code":"region_ranger(   these_regions = NULL,   qchrom = NULL,   qstart = NULL,   qend = NULL,   projection = \"hg38\",   raw = FALSE )"},{"path":"https://github.com/mattssca/BioMaesteR/reference/region_ranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Region Ranger. — region_ranger","text":"these_regions region(s) queried. Can data frame regions following columns; chrom, start, end. string following format chr:start-end. qchrom Query chromosome (prefixed un-prefixed), Required `these_regions` provided. qstart Query start position. Required `these_regions` provided. qend Query end position. Required `these_regions` provided. projection desired projection want back coordinates . Available projections hg38 grch37. Default hg38. raw Set TRUE return columns. Default FALSE.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/region_ranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Region Ranger. — region_ranger","text":"data frame genomic events residing specified region(s).","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/region_ranger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Region Ranger. — region_ranger","text":"Query region return genomic events residing inside specified region. function accepts variety incoming regions. Either, regions can provided data frame `these_regions`. , following columns must exist; chrom, start, end. parameter (`these_regions`) also accept region \"region\" format, (.e chr:start-end). can region vector characters multiple regions. user can also individually specify region(s) ; `qchrom` (string), `qstart` (string, integer), `qend` (string integer). parameters can also accept vector characters multiple regions. function also handles chromosome prefixes returned object, based selected `projection`.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/region_ranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Region Ranger. — region_ranger","text":"","code":"#Example 1 - Give the function one region as a string my_region = region_ranger(these_regions = \"chr8:127735434-127742951\")  #Example 2 - Give the function multiple regions as a string my_regions = region_ranger(these_regions = c(\"chr8:128747680-128753674\",                                              \"chr18:60790579-60987361\"),                             projection = \"grch37\")  #Example 3 - Individually specify the chromosome, start and end coordinates this_region = region_ranger(qchrom = \"chr8\",                             qstart = 127735434,                             qend = 127742951)  #Example 4 - Individually specify multiple regions with the query parameters these_regions = region_ranger(qchrom = c(\"chr8\", \"chr18\"),                               qstart = c(128747680, 60790579),                               qend = c(128753674, 60987361),                               projection = \"grch37\")"},{"path":"https://github.com/mattssca/BioMaesteR/reference/sanity_check_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanity Check Regions. — sanity_check_regions","title":"Sanity Check Regions. — sanity_check_regions","text":"Helper function ensuring provided regions valid.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/sanity_check_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanity Check Regions. — sanity_check_regions","text":"","code":"sanity_check_regions(incoming_regions = NULL, projection = NULL)"},{"path":"https://github.com/mattssca/BioMaesteR/reference/sanity_check_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanity Check Regions. — sanity_check_regions","text":"incoming_regions data frame regions following columns; chrom, start, end. projection projection.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/sanity_check_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanity Check Regions. — sanity_check_regions","text":"Nothing.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/sanity_check_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sanity Check Regions. — sanity_check_regions","text":"function checks provided start coordinate equal greater end coordinate chromosome. also ensures specified ranges within actual chromosomal range.","code":""},{"path":"https://github.com/mattssca/BioMaesteR/reference/sanity_check_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sanity Check Regions. — sanity_check_regions","text":"","code":"#Example 1 - Give the function one region as a string my_regions = data.frame(chrom = c(\"chr1\", \"chr2\"), start = c(100, 100), end = c(200, 200)) sanity_check_regions(incoming_regions = my_regions, projection = \"hg38\") #> NULL"}]
